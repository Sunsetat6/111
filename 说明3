3. Functional dashboard showing real-time data and alerts (Task 3)
Create a basic dashboard that displays animal locations and prints alert messages using Python's Turtle graphics library.

import turtle
import json

def display_position(x, y):
    turtle.goto(x, y)
    turtle.dot(10)  # Mark the position

def check_zone(x, y):
    if x < -200 or x > 200 or y < -200 or y > 200:
        print(f"Alert: Animal out of bounds at ({x}, {y})")

def on_message(client, userdata, message):
    msg_payload = str(message.payload.decode("utf-8"))
    data = json.loads(msg_payload)
    x, y = int(data['X']), int(data['Y'])
    display_position(x, y)
    check_zone(x, y)

# Setup Turtle
turtle.Screen().setworldcoordinates(-250, -250, 250, 250)
turtle.up()

# Setup MQTT Client
client = mqtt.Client("ClientID")
client.connect("srv-lora.isep.fr")
client.subscribe("emulateur_colliers")
client.on_message = on_message

turtle.mainloop()  # Start Turtle graphics
client.loop_start()  # Start the MQTT client in a background thread


3. Functional dashboard showing real-time data and alerts (Task 3)
Basic version: Implemented using Python's Turtle graphics library, which also needs to be run in an environment that supports Python, usually a personal computer.
Advanced version: If you choose to develop a web version of the dashboard, you may need a web server to host and run the front-end HTML/CSS/JavaScript code, and the back-end (may use Node.js, Python Flask/Django, etc.) also needs to be in Run in an environment capable of handling HTTP requests.
Overall structure
Arduino MKRWAN card: generates data and sends it via LoRa.
LoRa Gateway: Receives LoRa messages from the Arduino card and forwards them to the MQTT server.
MQTT server: processes and forwards messages. This can be a public MQTT service, or a server you build yourself.
Data processing and dashboard application: runs on a PC or server, listens to MQTT messages, processes data, and displays it on the dashboard.
