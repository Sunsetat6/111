3. 功能仪表板显示实时数据和警报（Task 3）
创建一个基本的仪表板，使用Python的Turtle图形库显示动物位置，并打印警报消息。

import turtle
import json

def display_position(x, y):
    turtle.goto(x, y)
    turtle.dot(10)  # Mark the position

def check_zone(x, y):
    if x < -200 or x > 200 or y < -200 or y > 200:
        print(f"Alert: Animal out of bounds at ({x}, {y})")

def on_message(client, userdata, message):
    msg_payload = str(message.payload.decode("utf-8"))
    data = json.loads(msg_payload)
    x, y = int(data['X']), int(data['Y'])
    display_position(x, y)
    check_zone(x, y)

# Setup Turtle
turtle.Screen().setworldcoordinates(-250, -250, 250, 250)
turtle.up()

# Setup MQTT Client
client = mqtt.Client("ClientID")
client.connect("srv-lora.isep.fr")
client.subscribe("emulateur_colliers")
client.on_message = on_message

turtle.mainloop()  # Start Turtle graphics
client.loop_start()  # Start the MQTT client in a background thread


3. 功能仪表板显示实时数据和警报（Task 3）
基础版本：使用Python的Turtle图形库来实现，同样需要在支持Python的环境中运行，通常是个人电脑。
进阶版本：如果选择开发网页版的仪表板，你可能需要一个网页服务器来托管和运行前端HTML/CSS/JavaScript代码，并且后端（可能使用Node.js, Python Flask/Django等）也需要在能够处理HTTP请求的环境中运行。
整体架构
Arduino MKRWAN卡：生成数据，并通过LoRa发送。
LoRa网关：接收来自Arduino卡的LoRa消息，并将其转发到MQTT服务器。
MQTT服务器：处理和转发消息。这可以是一个公共的MQTT服务，或者你自己搭建的服务器。
数据处理和仪表板应用：在个人电脑或服务器上运行，监听MQTT消息，处理数据，并显示在仪表板上。
