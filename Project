#include <MKRWAN.h>

LoRaModem modem;

// Network session keys (replace with actual keys)
const String appEui = "YOUR_APP_EUI";
const String appKey = "YOUR_APP_KEY";

void setup() {
  // Start the serial communication
  Serial.begin(115200);
  while (!Serial);

  // Initialize the LoRa modem
  if (!modem.begin(EU868)) {
    Serial.println("Failed to start the modem");
    while (1) {}
  }

  // Join the LoRa network using OTAA
  bool connected = modem.joinOTAA(appEui, appKey);
  if (!connected) {
    Serial.println("Joining LoRa network failed");
    while (1) {}
  }

  Serial.println("Connected to LoRa network successfully");
  modem.minPollInterval(60); // Set the minimum polling interval to 60 seconds
}

void loop() {
  // Generate a message to send to the network
  String msg = createMessage();

  Serial.println();
  Serial.print("Sending: " + msg + " - ");

  // Send the message as hex values for each character
  for (unsigned int i = 0; i < msg.length(); i++) {
    Serial.print(msg[i] >> 4, HEX);
    Serial.print(msg[i] & 0xF, HEX);
    Serial.print(" ");
  }
  Serial.println();

  // Send the message over LoRa network
  if (sendMessage(msg)) {
    Serial.println("Message sent correctly!");
  } else {
    Serial.println("Error sending message");
  }

  delay(10000); // Wait for 10 seconds before sending the next message
}

String createMessage() {
  String id = "Marguerite"; // Identifier for the collar
  int x = random(-250, 250); // Random X coordinate
  int y = random(-250, 250); // Random Y coordinate
  // Generate the message in the format "ID:X:Y"
  return id + ":" + String(x) + ":" + String(y);
}

bool sendMessage(String message) {
  int err;
  modem.beginPacket();
  modem.print(message);
  err = modem.endPacket(true); // Send confirmed packet
  return err > 0;
}
